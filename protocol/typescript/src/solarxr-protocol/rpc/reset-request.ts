// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { BodyPart } from '../../solarxr-protocol/datatypes/body-part.js';
import { ResetType } from '../../solarxr-protocol/rpc/reset-type.js';


export class ResetRequest implements flatbuffers.IUnpackableObject<ResetRequestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ResetRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsResetRequest(bb:flatbuffers.ByteBuffer, obj?:ResetRequest):ResetRequest {
  return (obj || new ResetRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsResetRequest(bb:flatbuffers.ByteBuffer, obj?:ResetRequest):ResetRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ResetRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

resetType():ResetType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : ResetType.Yaw;
}

trackerPositions(index: number):BodyPart|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

trackerPositionsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

trackerPositionsArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

referenceTrackerPosition():BodyPart {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : BodyPart.NONE;
}

static startResetRequest(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addResetType(builder:flatbuffers.Builder, resetType:ResetType) {
  builder.addFieldInt8(0, resetType, ResetType.Yaw);
}

static addTrackerPositions(builder:flatbuffers.Builder, trackerPositionsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, trackerPositionsOffset, 0);
}

static createTrackerPositionsVector(builder:flatbuffers.Builder, data:BodyPart[]):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startTrackerPositionsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addReferenceTrackerPosition(builder:flatbuffers.Builder, referenceTrackerPosition:BodyPart) {
  builder.addFieldInt8(2, referenceTrackerPosition, BodyPart.NONE);
}

static endResetRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createResetRequest(builder:flatbuffers.Builder, resetType:ResetType, trackerPositionsOffset:flatbuffers.Offset, referenceTrackerPosition:BodyPart):flatbuffers.Offset {
  ResetRequest.startResetRequest(builder);
  ResetRequest.addResetType(builder, resetType);
  ResetRequest.addTrackerPositions(builder, trackerPositionsOffset);
  ResetRequest.addReferenceTrackerPosition(builder, referenceTrackerPosition);
  return ResetRequest.endResetRequest(builder);
}

unpack(): ResetRequestT {
  return new ResetRequestT(
    this.resetType(),
    this.bb!.createScalarList<BodyPart>(this.trackerPositions.bind(this), this.trackerPositionsLength()),
    this.referenceTrackerPosition()
  );
}


unpackTo(_o: ResetRequestT): void {
  _o.resetType = this.resetType();
  _o.trackerPositions = this.bb!.createScalarList<BodyPart>(this.trackerPositions.bind(this), this.trackerPositionsLength());
  _o.referenceTrackerPosition = this.referenceTrackerPosition();
}
}

export class ResetRequestT implements flatbuffers.IGeneratedObject {
constructor(
  public resetType: ResetType = ResetType.Yaw,
  public trackerPositions: (BodyPart)[] = [],
  public referenceTrackerPosition: BodyPart = BodyPart.NONE
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const trackerPositions = ResetRequest.createTrackerPositionsVector(builder, this.trackerPositions);

  return ResetRequest.createResetRequest(builder,
    this.resetType,
    trackerPositions,
    this.referenceTrackerPosition
  );
}
}
