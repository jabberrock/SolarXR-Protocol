// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::mem;
use core::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum YawCorrectionSettingsOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct YawCorrectionSettings<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for YawCorrectionSettings<'a> {
  type Inner = YawCorrectionSettings<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> YawCorrectionSettings<'a> {
  pub const VT_ENABLED: flatbuffers::VOffsetT = 4;
  pub const VT_AMOUNTINDEGPERSEC: flatbuffers::VOffsetT = 6;
  pub const VT_ALIGNLEGTRACKERS: flatbuffers::VOffsetT = 8;
  pub const VT_ALIGNLEGTRACKERSTOUPPERBODY: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    YawCorrectionSettings { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args YawCorrectionSettingsArgs
  ) -> flatbuffers::WIPOffset<YawCorrectionSettings<'bldr>> {
    let mut builder = YawCorrectionSettingsBuilder::new(_fbb);
    builder.add_amountInDegPerSec(args.amountInDegPerSec);
    builder.add_alignLegTrackersToUpperBody(args.alignLegTrackersToUpperBody);
    builder.add_alignLegTrackers(args.alignLegTrackers);
    builder.add_enabled(args.enabled);
    builder.finish()
  }


  #[inline]
  pub fn enabled(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(YawCorrectionSettings::VT_ENABLED, Some(false)).unwrap()}
  }
  #[inline]
  pub fn amountInDegPerSec(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(YawCorrectionSettings::VT_AMOUNTINDEGPERSEC, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn alignLegTrackers(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(YawCorrectionSettings::VT_ALIGNLEGTRACKERS, Some(false)).unwrap()}
  }
  #[inline]
  pub fn alignLegTrackersToUpperBody(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(YawCorrectionSettings::VT_ALIGNLEGTRACKERSTOUPPERBODY, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for YawCorrectionSettings<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<bool>("enabled", Self::VT_ENABLED, false)?
     .visit_field::<f32>("amountInDegPerSec", Self::VT_AMOUNTINDEGPERSEC, false)?
     .visit_field::<bool>("alignLegTrackers", Self::VT_ALIGNLEGTRACKERS, false)?
     .visit_field::<bool>("alignLegTrackersToUpperBody", Self::VT_ALIGNLEGTRACKERSTOUPPERBODY, false)?
     .finish();
    Ok(())
  }
}
pub struct YawCorrectionSettingsArgs {
    pub enabled: bool,
    pub amountInDegPerSec: f32,
    pub alignLegTrackers: bool,
    pub alignLegTrackersToUpperBody: bool,
}
impl<'a> Default for YawCorrectionSettingsArgs {
  #[inline]
  fn default() -> Self {
    YawCorrectionSettingsArgs {
      enabled: false,
      amountInDegPerSec: 0.0,
      alignLegTrackers: false,
      alignLegTrackersToUpperBody: false,
    }
  }
}

pub struct YawCorrectionSettingsBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> YawCorrectionSettingsBuilder<'a, 'b> {
  #[inline]
  pub fn add_enabled(&mut self, enabled: bool) {
    self.fbb_.push_slot::<bool>(YawCorrectionSettings::VT_ENABLED, enabled, false);
  }
  #[inline]
  pub fn add_amountInDegPerSec(&mut self, amountInDegPerSec: f32) {
    self.fbb_.push_slot::<f32>(YawCorrectionSettings::VT_AMOUNTINDEGPERSEC, amountInDegPerSec, 0.0);
  }
  #[inline]
  pub fn add_alignLegTrackers(&mut self, alignLegTrackers: bool) {
    self.fbb_.push_slot::<bool>(YawCorrectionSettings::VT_ALIGNLEGTRACKERS, alignLegTrackers, false);
  }
  #[inline]
  pub fn add_alignLegTrackersToUpperBody(&mut self, alignLegTrackersToUpperBody: bool) {
    self.fbb_.push_slot::<bool>(YawCorrectionSettings::VT_ALIGNLEGTRACKERSTOUPPERBODY, alignLegTrackersToUpperBody, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> YawCorrectionSettingsBuilder<'a, 'b> {
    let start = _fbb.start_table();
    YawCorrectionSettingsBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<YawCorrectionSettings<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for YawCorrectionSettings<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("YawCorrectionSettings");
      ds.field("enabled", &self.enabled());
      ds.field("amountInDegPerSec", &self.amountInDegPerSec());
      ds.field("alignLegTrackers", &self.alignLegTrackers());
      ds.field("alignLegTrackersToUpperBody", &self.alignLegTrackersToUpperBody());
      ds.finish()
  }
}
