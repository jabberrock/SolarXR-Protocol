// automatically generated by the FlatBuffers compiler, do not modify

package solarxr_protocol.rpc

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

@Suppress("unused")
class ResetRequest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : ResetRequest {
        __init(_i, _bb)
        return this
    }
    val resetType : UByte
        get() {
            val o = __offset(4)
            return if(o != 0) bb.get(o + bb_pos).toUByte() else 0u
        }
    val bodyPose : UByte?
        get() {
            val o = __offset(6)
            return if(o != 0) bb.get(o + bb_pos).toUByte() else null
        }
    val referenceTracker : UByte?
        get() {
            val o = __offset(8)
            return if(o != 0) bb.get(o + bb_pos).toUByte() else null
        }
    fun trackers(j: Int) : UByte {
        val o = __offset(10)
        return if (o != 0) {
            bb.get(__vector(o) + j * 1).toUByte()
        } else {
            0u
        }
    }
    val trackersLength : Int
        get() {
            val o = __offset(10); return if (o != 0) __vector_len(o) else 0
        }
    val trackersAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun trackersInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    companion object {
        @JvmStatic
        fun validateVersion() = Constants.FLATBUFFERS_22_10_26()
        @JvmStatic
        fun getRootAsResetRequest(_bb: ByteBuffer): ResetRequest = getRootAsResetRequest(_bb, ResetRequest())
        @JvmStatic
        fun getRootAsResetRequest(_bb: ByteBuffer, obj: ResetRequest): ResetRequest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        @JvmStatic
        fun createResetRequest(builder: FlatBufferBuilder, resetType: UByte, bodyPose: UByte?, referenceTracker: UByte?, trackersOffset: Int) : Int {
            builder.startTable(4)
            addTrackers(builder, trackersOffset)
            referenceTracker?.run { addReferenceTracker(builder, referenceTracker) }
            bodyPose?.run { addBodyPose(builder, bodyPose) }
            addResetType(builder, resetType)
            return endResetRequest(builder)
        }
        @JvmStatic
        fun startResetRequest(builder: FlatBufferBuilder) = builder.startTable(4)
        @JvmStatic
        fun addResetType(builder: FlatBufferBuilder, resetType: UByte) = builder.addByte(0, resetType.toByte(), 0)
        @JvmStatic
        fun addBodyPose(builder: FlatBufferBuilder, bodyPose: UByte) = builder.addByte(1, bodyPose.toByte(), 0)
        @JvmStatic
        fun addReferenceTracker(builder: FlatBufferBuilder, referenceTracker: UByte) = builder.addByte(2, referenceTracker.toByte(), 0)
        @JvmStatic
        fun addTrackers(builder: FlatBufferBuilder, trackers: Int) = builder.addOffset(3, trackers, 0)
        @JvmStatic
        fun createTrackersVector(builder: FlatBufferBuilder, data: UByteArray) : Int {
            builder.startVector(1, data.size, 1)
            for (i in data.size - 1 downTo 0) {
                builder.addByte(data[i].toByte())
            }
            return builder.endVector()
        }
        @JvmStatic
        fun startTrackersVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(1, numElems, 1)
        @JvmStatic
        fun endResetRequest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
